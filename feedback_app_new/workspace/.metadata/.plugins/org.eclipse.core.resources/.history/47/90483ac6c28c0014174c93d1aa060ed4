package org.config;

import java.util.Properties;

import javax.sql.DataSource;

import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.DependsOn;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.annotation.Order;
import org.springframework.core.env.Environment;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.hibernate4.HibernateTransactionManager;
import org.springframework.orm.hibernate4.LocalSessionFactoryBean;
import org.springframework.transaction.annotation.EnableTransactionManagement;


@Configuration
@EnableTransactionManagement
//@ComponentScan({ "org.config","org.service","org.dao","org.domain" })
@PropertySource(value = { "classpath:application.properties" })
public class HibernateConfiguration {
/*static{
	System.out.println("called....");
}*/
/*	public HibernateConfiguration(){
		System.out.println("HibernateConfiguration....");
	}*/
    @Autowired
    private Environment environment;
 
   
    @Bean
    @Order(value=1)
    public DataSource dataSource() {System.out.println("data source....");
        DriverManagerDataSource dataSource = new DriverManagerDataSource();
        dataSource.setDriverClassName(environment.getRequiredProperty("jdbc.driverClassName"));
        dataSource.setUrl(environment.getRequiredProperty("jdbc.url"));
        dataSource.setUsername(environment.getRequiredProperty("jdbc.username"));
        dataSource.setPassword(environment.getRequiredProperty("jdbc.password"));
        System.out.println("called1...."+dataSource);
        return dataSource;
    }
    
    @Bean
    @Order(value=2)
    //@DependsOn("DataSource")
    public LocalSessionFactoryBean sessionFactory() {
        LocalSessionFactoryBean sessionFactory = new LocalSessionFactoryBean();
        sessionFactory.setDataSource(dataSource());
        sessionFactory.setPackagesToScan(new String[] { "org.domain" });
        System.out.println("inside session factory....");
        sessionFactory.setHibernateProperties(hibernateProperties());
        System.out.println("session factory complete....");
        return sessionFactory;
     }
     
    private Properties hibernateProperties() {System.out.println("inside properties....");
        Properties properties = new Properties();
        properties.put("hibernate.dialect", environment.getRequiredProperty("hibernate.dialect"));
        properties.put("hibernate.show_sql", environment.getRequiredProperty("hibernate.show_sql"));
        properties.put("hibernate.format_sql", environment.getRequiredProperty("hibernate.format_sql"));
        System.out.println("properties...."+properties);
        return properties;       
    }
     
    @Bean(name="txName")
    //@Order(value=3)
    @Autowired
    public HibernateTransactionManager transactionManager(SessionFactory s) {System.out.println("called3....");
       HibernateTransactionManager txManager = new HibernateTransactionManager();
       txManager.setSessionFactory(s);
       return txManager;
    }
}